#include <iostream>

using namespace std;

class AdHocSquare {
public:
    AdHocSquare(double side);
    void set_side(double side);
    double get_side();
    double get_area();
private:
    double side;
};

AdHocSquare::AdHocSquare(double side) {
    this->side = side;
}

void AdHocSquare::set_side(double side) {
    if (side >= 0) {
        this->side = side;
    }
}

double AdHocSquare::get_side() {
    return side;
}

double AdHocSquare::get_area() {
    return side * side;
}

class LazySquare {
public:
    LazySquare(double side);
    void set_side(double side);
    double get_side();
    double get_area();
private:
    double side;
    double area;
    bool side_changed;
};

LazySquare::LazySquare(double side) {
    this->side = side;
    this->area = side * side;
    this->side_changed = false;
}

void LazySquare::set_side(double side) {
    if (side >= 0 && this->side != side) {
        this->side = side;
        this->side_changed = true;
    }
}

double LazySquare::get_side() {
    return side;
}

double LazySquare::get_area() {
    if (side_changed) {
        area = side * side;
        side_changed = false;
    }
    return area;
}

int main() {
    AdHocSquare ad_hoc_square(5);
    cout << "Ad hoc square with side " << ad_hoc_square.get_side() << " has area " << ad_hoc_square.get_area() << endl;
    ad_hoc_square.set_side(3);
    cout << "Ad hoc square with side " << ad_hoc_square.get_side() << " has area " << ad_hoc_square.get_area() << endl;

    LazySquare lazy_square(5);
    cout << "Lazy square with side " << lazy_square.get_side() << " has area " << lazy_square.get_area() << endl;
    lazy_square.set_side(3);
    cout << "Lazy square with side " << lazy_square.get_side() << " has area " << lazy_square.get_area() << endl;

    return 0;
}
